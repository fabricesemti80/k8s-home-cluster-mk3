---
#!ref: https://goauthentik.io/docs/installation/kubernetes
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authentik
  namespace: security
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.goauthentik.io
      chart: authentik
      version: 4.0.0
      sourceRef:
        kind: HelmRepository
        name: authentik-charts
        namespace: flux-system
      interval: 5m
  values:
    fullnameOverride: authentik
    image:
      repository: ghcr.io/goauthentik/server
      tag: 2021.10.2
    authentik:
      outposts:
        docker_image_base: ghcr.io/goauthentik/%(type)s:%(version)s
      secret_key: "${SECRET_AUTHENTIK_SECRET_KEY}"
      postgresql:
        host: "authentik-postgresql"
        name: "authentik"
        user: "authentik"
        password: "${SECRET_AUTHENTIK_POSTGRES_PASSWORD}"
      redis:
        host: "authentik-redis-master"
      email:
        host: "${SECRET_MAIL_HOST}"
        port: 587
        use_tls: true
        username: "${SECRET_MAIL_USER}"
        password: "${SECRET_MAIL_PASSWORD}"
        from: "no-reply@${SECRET_DOMAIN}"
    volumeMounts:
      - name: media
        mountPath: /media
    volumes:
      - name: media
        persistentVolumeClaim:
          claimName: authentik-media-v1
    ingress:
      enabled: true
      ingressClassName: "traefik"
      annotations:
        #? cert issuer; valid opttions: letsencrypt-stating or letsencrypt-production
        cert-manager.io/cluster-issuer: "letsencrypt-production"
        #? traefik-specifics
        traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        #? hajimari-specific (optional) - icon ref: https://materialdesignicons.com/
        hajimari.io/appName: "authentik"
        hajimari.io/enable: "true"
        hajimari.io/icon: "lock-check"
        #? external DNS - if need to be accessed via Internet (using CloudFlare)
        #? https://github.com/kubernetes-sigs/external-dns/blob/master/docs/faq.md
        external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
        external-dns/is-public: "true"
        # traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        # traefik.ingress.kubernetes.io/router.middlewares: "networking-cloudflare-ips@kubernetescrd"
        # external-dns/is-public: "true"
        # external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
      hosts:
        - host: "id.${SECRET_DOMAIN}"
          paths:
            - path: "/"
              pathType: Prefix
      tls:
        - hosts:
            - "id.${SECRET_DOMAIN}"
            #? needed for ingress!
          secretName: "authentik-tls"
    postgresql:
      enabled: true
      postgresqlUsername: authentik
      postgresqlDatabase: authentik
      postgresqlPassword: "${SECRET_AUTHENTIK_POSTGRES_PASSWORD}"
    redis:
      enabled: true
    prometheus:
      serviceMonitor:
        create: false
